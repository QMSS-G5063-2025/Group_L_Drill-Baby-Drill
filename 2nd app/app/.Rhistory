ussr_for_russia <- oil_gas_long %>%
filter(Country == "Former U.S.S.R.", Year %in% 1980:1991) %>%
mutate(Country = "Russia")
oil_gas_long <- oil_gas_long %>%
filter(!(Country == "Russia" & Year %in% 1980:1991)) %>%
bind_rows(ussr_for_russia)
oil_gas_long <- oil_gas_long %>%
filter(!(Country == "Russia" & Year == 1992 & (is.na(Total_Production) | Total_Production == 0)))
oil_gas_long <- oil_gas_long %>%
filter(!(Country == "Former U.S.S.R." & (Year > 1992 | is.na(Total_Production) | Total_Production == 0)))
# Chart 1: U.S. production over time
top10_countries <- oil_gas_long %>%
group_by(Country) %>%
summarise(Total_Prod = sum(Total_Production, na.rm = TRUE)) %>%
arrange(desc(Total_Prod)) %>%
slice_head(n = 10) %>%
pull(Country)
oil_gas_top10 <- oil_gas_long %>%
filter(Country %in% top10_countries)
oil_gas_top10 <- oil_gas_top10 %>%
mutate(Highlight = ifelse(Country == "United States", "U.S.", "Other"))
oil_gas_top10 <- oil_gas_top10 %>%
mutate(Year = as.numeric(Year))
p <- ggplot(oil_gas_top10, aes(x = Year, y = Total_Production, group = Country)) +
geom_line(aes(color = Highlight, alpha = Highlight), size = 1) +
scale_color_manual(values = c("U.S." = "red", "Other" = "grey70")) +
scale_alpha_manual(values = c("U.S." = 1, "Other" = 0.5)) +
scale_x_continuous(
breaks = seq(1980, 2023, by = 5),
limits = c(1980, 2025),
expand = c(0, 0)
) +
theme_minimal(base_size = 14) +
theme(legend.position = "none") +
labs(
title = "Top 10 Oil & Gas Producers (1980–2023)",
subtitle = "U.S. highlighted in red, others in grey",
x = "Year",
y = "Total Production (Million Barrels of Oil Equivalent)"
)
p
top10_countries <- oil_gas_long %>%
group_by(Country) %>%
summarise(Total_Prod = sum(Total_Production, na.rm = TRUE)) %>%
arrange(desc(Total_Prod)) %>%
slice_head(n = 10) %>%
pull(Country)
oil_gas_top10 <- oil_gas_long %>%
filter(Country %in% top10_countries) %>%
mutate(
Year = as.numeric(Year),
Highlight = ifelse(Country == "United States", "U.S.", "Other")
)
labels_2023 <- oil_gas_top10 %>%
filter(Year == 2023 & !is.na(Total_Production))
p <- ggplot(oil_gas_top10, aes(x = Year, y = Total_Production, group = Country)) +
geom_line(aes(color = Highlight, alpha = Highlight), size = 1) +
scale_color_manual(values = c("U.S." = "#800", "Other" = "grey70")) +
scale_alpha_manual(values = c("U.S." = 1, "Other" = 0.5)) +
scale_x_continuous(
limits = c(1980, 2025),
breaks = seq(1980, 2023, by = 5),
expand = c(0, 0)
) +
geom_text_repel(
data = labels_2023,
aes(label = Country, color = Highlight),
hjust = 0,                # left-aligned for readability
nudge_x = 1.5,
direction = "y",
segment.color = NA,
size = 3.5
) +
coord_cartesian(clip = "off") +
theme_minimal(base_size = 14) +
theme(
legend.position = "none",
plot.margin = margin(5.5, 40, 5.5, 5.5)
) +
labs(
title = "Top 10 Oil & Gas Producers (1980–2023)",
subtitle = "U.S. highlighted in red, others in grey",
x = "Year",
y = "Total Production (Million Barrels of Oil Equivalent)"
)
# *CONSUMPTION*
## Petroleum consumption
EIA_raw_petroleum_c <- read_excel("C:/Users/asus/Downloads/EIA_Petroleum_consumption_country.xlsx")
EIA_oil_c_clean <- EIA_raw_petroleum_c %>%
select(-matches("^197[3-9]$"))
colnames(EIA_oil_c_clean)[1:2] <- c("Code", "Country")
EIA_oil_c_clean<- EIA_oil_c_clean %>%
mutate(across(where(is.numeric), ~ . * 365)) # I am converting from Mb/d to million barrels
## Gas consumption
EIA_raw_gas_c <- read_excel("/Users/chloenemo/Documents/Second Semester/Data Visualisation/Group Project/EIA_Gas_consumption_country.xlsx")
# *CONSUMPTION*
## Petroleum consumption
EIA_raw_petroleum_c <- read_excel("C:/Users/asus/Downloads/EIA_Petroleum_consumption_country.xlsx")
EIA_oil_c_clean <- EIA_raw_petroleum_c %>%
select(-matches("^197[3-9]$"))
colnames(EIA_oil_c_clean)[1:2] <- c("Code", "Country")
EIA_oil_c_clean<- EIA_oil_c_clean %>%
mutate(across(where(is.numeric), ~ . * 365)) # I am converting from Mb/d to million barrels
## Gas consumption
EIA_raw_gas_c <- read_excel("C:/Users/asus/Downloads/EIA_Gas_consumption_country.xlsx")
EIA_gas_c_clean <- EIA_raw_gas_c %>%
mutate(across(where(is.numeric), ~ .x * 0.167)) # I am converting from bcf to million barrels of oil equivalent (mboe)
## Cleaning
EIA_oil_c_clean <- EIA_oil_c_clean %>%
mutate(across(matches("^[0-9]{4}$"), ~ as.numeric(.x)))
petroleum_c_long <- EIA_oil_c_clean %>%
pivot_longer(
cols = matches("^[0-9]{4}$"),
names_to = "Year",
values_to = "Oil_Consumption"
)
gas_c_long <- EIA_gas_clean %>%
pivot_longer(
cols = matches("^[0-9]{4}$"),
names_to = "Year",
values_to = "Gas_Consumption"
)
## Aggregating datasets for consumption
oil_gas_c_long <- full_join(petroleum_c_long, gas_c_long, by = c("Country", "Year"))
oil_gas_c_long <- oil_gas_c_long %>%
mutate(
Oil_Consumption = as.numeric(Oil_Consumption),
Gas_Consumption = as.numeric(Gas_Consumption),
Total_Consumption = coalesce(Oil_Consumption, 0) + coalesce(Gas_Consumption, 0)
)
oil_gas_c_long <- oil_gas_c_long %>%
filter(!Country %in% c("World", "OECD", "Non-OECD"))
prod_con <- full_join(oil_gas_long, oil_gas_c_long, by = c("Country", "Year"))
prod_con  <- prod_con  %>%
select(-Code.x, -Code.y)
# Version 3
# Selecting 2023
prod_con_2023 <- prod_con %>%
filter(Year == 2023) %>%
select(Country, Oil_Production, Gas_Production, Total_Production, Oil_Consumption, Gas_Consumption, Total_Consumption)
# Loading world map
world <- ne_countries(scale = "medium", returnclass = "sf")
# Merging datasets
map_data_merged <- world %>%
left_join(prod_con_2023, by = c("name_long" = "Country"))
# Selecting top 25 producers and top 25 consumers
top50_producers <- map_data_merged %>%
arrange(desc(Total_Production)) %>%
slice_head(n = 50)
top50_consumers <- map_data_merged %>%
arrange(desc(Total_Consumption)) %>%
slice_head(n = 50)
# Combining and deduplicating
map_top50 <- bind_rows(top50_producers, top50_consumers) %>%
distinct(name_long, .keep_all = TRUE)
# Computing centroids
map_top50 <- map_top50 %>%
st_centroid(of_largest_polygon = TRUE) %>%
mutate(
lon = st_coordinates(geometry)[, 1],
lat = st_coordinates(geometry)[, 2]
)
# Chart 2
top10_labels <- map_top50 %>%
arrange(desc(Total_Production)) %>%
slice_head(n = 10) %>%
mutate(
lon_label = lon + ifelse(lon > 0, 5, -5),
lat_label = lat + ifelse(lat > 0, 2, -2)
)
top10_labels <- top10_labels %>%
mutate(
lon_label = case_when(
name_long == "United Arab Emirates" ~ lon + 5,
name_long == "Iran" ~ lon + 3,
name_long == "Saudi Arabia" ~ lon - 5,
TRUE ~ lon_label
),
lat_label = case_when(
name_long == "United Arab Emirates" ~ lat + 2,
name_long == "Iran" ~ lat - 2,
name_long == "Saudi Arabia" ~ lat + 2,
TRUE ~ lat_label
)
)
leaflet(map_top50) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels) %>%
setView(lng = 0, lat = 20, zoom = 2) %>%
addCircleMarkers(
lng = ~lon, lat = ~lat,
radius = ~sqrt(Total_Consumption) / 6,
color = NA,
fillColor = "#3A6C74",
fillOpacity = 0.8
) %>%
addCircleMarkers(
lng = ~lon, lat = ~lat,
radius = ~sqrt(Total_Production) / 6,
color = "black",
fillOpacity = 0,
weight = 3
) %>%
addLabelOnlyMarkers(
data = top10_labels,
lng = ~lon_label, lat = ~lat_label,
label = ~name_long,
labelOptions = labelOptions(
noHide = TRUE,
direction = "auto",
textOnly = TRUE,
style = list(
"color" = "black",
"font-weight" = "bold",
"font-size" = "12px",
"background" = "white",
"padding" = "2px 4px",
"border-radius" = "4px",
"box-shadow" = "2px 2px 2px rgba(0,0,0,0.1)"
)
)
)
# Data cleaning
## * PRODUCTION*
## Petroleum production
EIA_raw_petroleum <- read_excel("C:/Users/asus/Downloads/EIA_Petroleum_by_country.xlsx")
EIA_petroleum_clean <- EIA_raw_petroleum %>%
filter(`...3` == "Crude oil, NGPL, and other liquids (Mb/d)") %>%
select(-`...3`)
colnames(EIA_petroleum_clean)[1:2] <- c("Code", "Country")
EIA_petroleum_clean <- EIA_petroleum_clean %>%
mutate(across(where(is.numeric), ~ .x * 365)) # Need to adjust Mb/d to million barrels
## Gas
EIA_raw_gas <- read_excel("C:/Users/asus/Downloads/EIA_Gas_by_country.xlsx")
EIA_gas_clean <- EIA_raw_gas %>%
mutate(across(where(is.numeric), ~ .x * 0.167)) # I am converting bcf to million barrels of oil equivalent (mboe)
## Cleaning
EIA_petroleum_clean <- EIA_petroleum_clean %>%
mutate(across(matches("^[0-9]{4}$"), ~ as.numeric(.x)))
petroleum_long <- EIA_petroleum_clean %>%
pivot_longer(
cols = matches("^[0-9]{4}$"),
names_to = "Year",
values_to = "Oil_Production"
)
gas_long <- EIA_gas_clean %>%
pivot_longer(
cols = matches("^[0-9]{4}$"),
names_to = "Year",
values_to = "Gas_Production"
)
## Aggregating datasets for production
oil_gas_long <- full_join(petroleum_long, gas_long, by = c("Country", "Year"))
oil_gas_long <- oil_gas_long %>%
mutate(
Oil_Production = as.numeric(Oil_Production),
Gas_Production = as.numeric(Gas_Production),
Total_Production = coalesce(Oil_Production, 0) + coalesce(Gas_Production, 0)
)
oil_gas_long <- oil_gas_long %>%
filter(Year >= 1980, Year <= 2023)
oil_gas_long <- oil_gas_long %>%
filter(!Country %in% c("World", "OECD", "Non-OECD"))
## Adjusting for Russia/Former URSS
ussr_for_russia <- oil_gas_long %>%
filter(Country == "Former U.S.S.R.", Year %in% 1980:1991) %>%
mutate(Country = "Russia")
oil_gas_long <- oil_gas_long %>%
filter(!(Country == "Russia" & Year %in% 1980:1991)) %>%
bind_rows(ussr_for_russia)
oil_gas_long <- oil_gas_long %>%
filter(!(Country == "Russia" & Year == 1992 & (is.na(Total_Production) | Total_Production == 0)))
oil_gas_long <- oil_gas_long %>%
filter(!(Country == "Former U.S.S.R." & (Year > 1992 | is.na(Total_Production) | Total_Production == 0)))
Rent <- read_excel("C:/Users/asus/Downloads/FFRegistry_Rent_GDP.xlsx")
# Creating top 20 countries by fossil fuel rent
top_20_rent <- Rent %>%
group_by(Country) %>%
summarize(Rent = sum(`Rent (USD)`, na.rm = TRUE)) %>%
arrange(desc(Rent)) %>%
slice_head(n = 20)
# Creating color column
top_20_rent <- top_20_rent %>%
mutate(color = ifelse(Country == "United States", "#800", "#346674"))
# Chart 3
p <- ggplot(top_20_rent, aes(x = reorder(Country, Rent), y = Rent,
text = paste0("Country: ", Country, "<br>Rent: ", comma(Rent)))) +
geom_bar(stat = "identity", aes(fill = color), width = 0.7) +  # Slightly thinner bars
scale_fill_identity() +
coord_flip(clip = "off") +
scale_y_continuous(labels = comma, expand = expansion(mult = c(0, 0.1))) +
labs(
title = "Top 20 Countries by Fossil Fuel Rent",
x = NULL,
y = "Fossil Fuel Rent (USD)"
) +
theme_minimal(base_family = "Arial") +
theme(
plot.title = element_text(family = "Arial", face = "bold", size = 18, hjust = 0),
axis.text.y = element_text(size = 11, margin = margin(r = 15)),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(margin = margin(r = 20)),
plot.margin = margin(20, 50, 20, 20),
legend.position = "none"   # <<< THIS LINE REMOVES THE LEGEND
)
interactive_plot <- ggplotly(p, tooltip = "text")
interactive_plot
climate_policies <- read_csv("C:/Users/asus/Downloads/CCLAWS_Text_Analysis.csv")
# Version 1
# Detecting fossil fuel mentions
climate_policies <- climate_policies %>%
mutate(
fossil_fuel_mention = if_else(str_detect(`Family Summary`, regex("fossil fuel", ignore_case = TRUE)), 1, 0)
)
# Aggregating mentions by country
country_mentions <- climate_policies %>%
group_by(Geographies) %>%
summarise(total_mentions = sum(fossil_fuel_mention, na.rm = TRUE)) %>%
ungroup()
# Classifying commitment level
country_mentions <- country_mentions %>%
mutate(commitment_level = case_when(
total_mentions == 0 ~ "No Commitment",
total_mentions <= 2 ~ "Low Commitment",
total_mentions <= 5 ~ "Medium Commitment",
total_mentions > 5 ~ "High Commitment"
))
# Assigning document type "strength"
climate_policies <- climate_policies %>%
mutate(
doc_strength = case_when(
`Document Type` %in% c("Regulation", "Order", "Decree", "Law") ~ 1,
`Document Type` %in% c("Framework", "Policy Report", "Discussion", "Summary") ~ -1,
TRUE ~ 0
)
)
# Calculating average strength per country (only fossil fuel mentions)
country_color_score <- climate_policies %>%
filter(fossil_fuel_mention == 1) %>%
group_by(Geographies) %>%
summarise(avg_strength = mean(doc_strength, na.rm = TRUE)) %>%
ungroup()
# Normalizing color between 0 and 1
country_color_score <- country_color_score %>%
mutate(color_value = (avg_strength + 1) / 2) %>%
mutate(color = rgb(1 - color_value, color_value, 0))  # Red to green
# Merging commitment and color scores
network_data <- country_mentions %>%
left_join(country_color_score, by = c("Geographies")) %>%
filter(!is.na(commitment_level))
# Preparing tree structure
# For Low, Medium, High Commitment - list countries
low_medium_high <- network_data %>%
filter(commitment_level != "No Commitment") %>%
mutate(root = "Fossil Fuel Policy") %>%
select(root, commitment_level, country = Geographies, color)
# For No Commitment - aggregate into one node
no_commitment <- network_data %>%
filter(commitment_level == "No Commitment") %>%
mutate(root = "Fossil Fuel Policy") %>%
summarise(
root = first(root),
commitment_level = "No Commitment",
country = paste(n(), "countries with no commitment"),
color = NA
)
# Combine
tree_data <- bind_rows(low_medium_high, no_commitment)
# Creating fill color
tree_data <- tree_data %>%
mutate(
fill_color = ifelse(is.na(color), NA, color)
)
# Creating the tree
collapsibleTree(
tree_data,
hierarchy = c("root", "commitment_level", "country"),
fill = "fill_color",
collapsed = FALSE,
linkLength = 150,
fontSize = 15
)
#Version 2
# Detecting fossil fuel mentions
climate_policies <- climate_policies %>%
mutate(
fossil_fuel_mention = if_else(
str_detect(`Family Summary`, regex("fossil fuel|oil|gas|coal|petroleum|natural gas", ignore_case = TRUE)),
1, 0
)
)
# Summarizing mentions
summary_mentions <- climate_policies %>%
group_by(Geographies, `Document Type`) %>%
summarise(
total_policies = n(),
fossil_fuel_policies = sum(fossil_fuel_mention, na.rm = TRUE),
fossil_fuel_share = fossil_fuel_policies / total_policies
) %>%
ungroup()
# Computing total fossil fuel mentions by country and document type
country_totals <- summary_mentions %>%
group_by(Geographies) %>%
summarise(total_fossil_share = sum(fossil_fuel_share, na.rm = TRUE)) %>%
arrange(desc(total_fossil_share))
document_totals <- summary_mentions %>%
group_by(`Document Type`) %>%
summarise(total_fossil_share = sum(fossil_fuel_share, na.rm = TRUE)) %>%
arrange(desc(total_fossil_share))
# Reordering factors
summary_mentions <- summary_mentions %>%
mutate(
Geographies = fct_reorder(Geographies, country_totals$total_fossil_share[match(Geographies, country_totals$Geographies)]),
`Document Type` = fct_reorder(`Document Type`, document_totals$total_fossil_share[match(`Document Type`, document_totals$`Document Type`)])
)
# Creating base heatmap
base_heatmap <- ggplot(summary_mentions, aes(x = `Document Type`, y = Geographies, fill = fossil_fuel_share)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "#800", na.value = "grey90") +
labs(
x = "Document Type",
y = "Country / Region",
title = "Heatmap of Fossil Fuel Focus in Climate Policies",
subtitle = "Darker = Higher Share of Fossil Fuel Mentions",
fill = "Fossil Fuel Share"
) +
theme_minimal() +
theme(
axis.text.x = element_blank(),  # Remove x labels
axis.text.y = element_blank(),  # Remove y labels
plot.title = element_text(face = "bold", size = 18),
plot.subtitle = element_text(size = 14),
axis.title = element_text(size = 14)
)
# Making it interactive
interactive_heatmap <- ggplotly(base_heatmap)
interactive_heatmap
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
shiny::runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
shiny::runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
# --- Load Libraries ---
library(shiny)
library(ggplot2)
library(readxl)
library(dplyr)
library(tidyr)
library(leaflet)
library(ggrepel)
library(plotly)
library(collapsibleTree)
library(stringr)
library(scales)
library(visNetwork)
library(tidytext)
library(igraph)
library(ggraph)
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
# --- Load Data ---
EIA_petroleum      <- read_excel("C:/Users/asus/Downloads/EIA_Petroleum_by_country.xlsx")
EIA_gas            <- read_excel("C:/Users/asus/Downloads/EIA_Gas_by_country.xlsx")
EIA_petroleum_c    <- read_excel("C:/Users/asus/Downloads/EIA_Petroleum_consumption_country.xlsx")
EIA_gas_c          <- read_excel("C:/Users/asus/Downloads/EIA_Gas_consumption_country.xlsx")
Rent               <- read_excel("C:/Users/asus/Downloads/FFRegistry_Rent_GDP.xlsx")
carbon_data        <- read_excel("C:/Users/asus/Downloads/FFRegistry_Carbon Intensity.xlsx")
climate_policies   <- read.csv("C:/Users/asus/Downloads/CCLAWS_Text_Analysis.csv")
# --- Preprocessing for production data ---
petroleum_clean <- EIA_petroleum %>%
filter(`...3` == "Crude oil, NGPL, and other liquids (Mb/d)") %>%
select(-`...3`) %>%
rename(Code = 1, Country = 2)
# Convert all column names to character
colnames(petroleum_clean) <- as.character(colnames(petroleum_clean))
# Now apply numeric conversion only to year columns
petroleum_clean <- petroleum_clean %>%
mutate(across(matches("^[0-9]{4}$"), ~ as.numeric(.x) * 365))
colnames(gas_clean) <- as.character(colnames(gas_clean))
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
rsconnect::deployApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
shiny::runApp()
runApp()
rsconnect::deployApp('C:/Users/asus/Desktop/MSAFA/Data Visualization/Group_L_Drill-Baby-Drill/2nd app/app')
runApp()
runApp()
runApp()
runApp()
runApp()
